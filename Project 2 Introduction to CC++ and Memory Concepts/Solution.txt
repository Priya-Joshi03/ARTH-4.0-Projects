Project 2: Introduction to C/C++ and Memory Concepts
Objective:
 Introduce foundational concepts of C/C++ programming with a focus on memory architecture and compiler basics, laying the groundwork for deeper understanding of system-level programming.
Tasks:
Explain the structure and syntax of C and C++.
Describe what a physical memory address is and how RAM works.
Illustrate how memory addresses and memory segments are organized.
Introduce the compilerâ€™s role in translating code.
Discuss byte-level memory usage and the concept of data types.
Practice variable declaration and assignments.


____________________________________________________________________

[root@localhost ~]# useradd cuser
[root@localhost ~]# passwd cuser
New password:
Retype new password:
passwd: all authentication tokens updated successfully.

[root@localhost ~]# su - cuser
[cuser@localhost ~]$ mkdir c_basics
[cuser@localhost ~]$ cd c_basics


[cuser@localhost c_basics]$ vim memory_intro.c
[cuser@localhost c_basics]$ cat memory_intro.c
#include <stdio.h>

int main() {
    int a = 10;
    float b = 20.5;
    char c = 'Z';

    printf("Integer a: %d, Address: %p\n", a, (void*)&a);
    printf("Float b: %.2f, Address: %p\n", b, (void*)&b);
    printf("Char c: %c, Address: %p\n", c, (void*)&c);

    return 0;
}

[cuser@localhost c_basics]$ gcc memory_intro.c -o memory_demo

[cuser@localhost c_basics]$ ./memory_demo
Integer a: 10, Address: 0x7ffd8d2bb5cc
Float b: 20.50, Address: 0x7ffd8d2bb5c8
Char c: Z, Address: 0x7ffd8d2bb5c7

[cuser@localhost c_basics]$ size memory_demo
   text	   data	    bss	    dec	    hex	filename
   1136	    288	      8	   1432	    598	memory_demo

[cuser@localhost c_basics]$ hexdump -C memory_demo | head -n 10
00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  02 00 3e 00 01 00 00 00  a0 02 40 00 00 00 00 00  |..>.......@.....|
00000020  40 00 00 00 00 00 00 00  d8 03 00 00 00 00 00 00  |@...............|
00000030  00 00 00 00 00 00 00 00  40 00 38 00 09 00 40 00  |........@.8...@.|
00000040  1d 00 1b 00 06 00 00 00  00 00 00 00 01 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 10 40 00 00 00 00 00  |..........@.....|
00000060  00 10 40 00 00 00 00 00  50 00 00 00 00 00 00 00  |..@.....P.......|
00000070  50 00 00 00 00 00 00 00  08 00 00 00 00 00 00 00  |P...............|
00000080  04 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  58 10 40 00 00 00 00 00  |........X.@.....|

[cuser@localhost c_basics]$ vim size_check.c
[cuser@localhost c_basics]$ cat size_check.c

#include <stdio.h>

int main() {
    printf("Size of int: %lu bytes\n", sizeof(int));
    printf("Size of float: %lu bytes\n", sizeof(float));
    printf("Size of double: %lu bytes\n", sizeof(double));
    printf("Size of char: %lu bytes\n", sizeof(char));
    return 0;
}

[cuser@localhost c_basics]$ gcc size_check.c -o size_check
[cuser@localhost c_basics]$ ./size_check
Size of int: 4 bytes
Size of float: 4 bytes
Size of double: 8 bytes
Size of char: 1 bytes

[cuser@localhost c_basics]$ objdump -f memory_demo

memory_demo:     file format elf64-x86-64
architecture: i386:x86-64, flags 0x00000112:
HAS_SYMS, D_PAGED
start address 0x0000000000001120


