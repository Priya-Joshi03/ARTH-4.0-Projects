Project 7: Create a VPC Using Terraform
Objective:
 Automate the creation of a Virtual Private Cloud (VPC) using Terraform.
Tasks:
Install Terraform and configure cloud provider credentials.
Write Terraform configuration to create a VPC, define CIDR block, subnets, and routing.
Set up security groups, internet gateway, and route tables.
Run terraform init, plan, and apply to deploy the VPC.
Verify VPC creation and configurations in the cloud provider's dashboard.
_______________________________________________________________

$ sudo apt update
$ sudo apt install -y wget unzip
$ wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
$ unzip terraform_1.5.0_linux_amd64.zip
$ sudo mv terraform /usr/local/bin/
$ terraform --version
Terraform v1.5.0
$ aws configure
AWS Access Key ID [None]: AKIAxxxxxxxxxxxxxxx
AWS Secret Access Key [None]: wJalrxxxxxxxxxxxxxx
Default region name [None]: us-east-1
Default output format [None]: json
$ mkdir terraform-vpc-project
$ cd terraform-vpc-project
$ touch main.tf
$ nano main.tf

# Contents of main.tf

# provider "aws" {
#   region = "us-east-1"
# }
#
# resource "aws_vpc" "main_vpc" {
#   cidr_block = "10.0.0.0/16"
#   enable_dns_support = true
#   enable_dns_hostnames = true
# }
#
# resource "aws_subnet" "subnet_a" {
#   vpc_id                  = aws_vpc.main_vpc.id
#   cidr_block              = "10.0.1.0/24"
#   availability_zone       = "us-east-1a"
#   map_public_ip_on_launch = true
# }
#
# resource "aws_subnet" "subnet_b" {
#   vpc_id                  = aws_vpc.main_vpc.id
#   cidr_block              = "10.0.2.0/24"
#   availability_zone       = "us-east-1b"
#   map_public_ip_on_launch = true
# }
#
# resource "aws_internet_gateway" "gw" {
#   vpc_id = aws_vpc.main_vpc.id
# }
#
# resource "aws_route_table" "public_rt" {
#   vpc_id = aws_vpc.main_vpc.id
#
#   route {
#     cidr_block = "0.0.0.0/0"
#     gateway_id = aws_internet_gateway.gw.id
#   }
# }
#
# resource "aws_route_table_association" "subnet_a_association" {
#   subnet_id      = aws_subnet.subnet_a.id
#   route_table_id = aws_route_table.public_rt.id
# }
#
# resource "aws_route_table_association" "subnet_b_association" {
#   subnet_id      = aws_subnet.subnet_b.id
#   route_table_id = aws_route_table.public_rt.id
# }
#
# resource "aws_security_group" "allow_all" {
#   name        = "allow_all"
#   description = "Allow all inbound and outbound traffic"
#   vpc_id      = aws_vpc.main_vpc.id
#
#   ingress {
#     from_port   = 0
#     to_port     = 65535
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
#
#   egress {
#     from_port   = 0
#     to_port     = 65535
#     protocol    = "tcp"
#     cidr_blocks = ["0.0.0.0/0"]
#   }
# }

$ terraform init
Initializing the backend...
Initializing provider plugins...
- Checking for available provider plugins...
- Downloading plugin for provider "aws"...
- Installed terraform-provider-aws v4.0.0
Terraform has been successfully initialized!
$ terraform plan
Terraform will perform the following actions:

# aws_vpc.main_vpc will be created
+ resource "aws_vpc" "main_vpc" {
    id             = (known after apply)
    cidr_block     = "10.0.0.0/16"
    enable_dns_support = true
    enable_dns_hostnames = true
    ...
}

# aws_subnet.subnet_a will be created
+ resource "aws_subnet" "subnet_a" {
    id             = (known after apply)
    cidr_block     = "10.0.1.0/24"
    ...
}

Plan: 5 to add, 0 to change, 0 to destroy.

$ terraform apply
Terraform will perform the following actions:

# aws_vpc.main_vpc will be created
+ resource "aws_vpc" "main_vpc" {
    id             = (known after apply)
    cidr_block     = "10.0.0.0/16"
    ...

# aws_subnet.subnet_a will be created
+ resource "aws_subnet" "subnet_a" {
    id             = (known after apply)
    cidr_block     = "10.0.1.0/24"
    ...

Plan: 5 to add, 0 to change, 0 to destroy.

Do you want to perform these actions? Terraform will perform the following actions:
  # aws_vpc.main_vpc will be created
  ...

Enter "yes" to confirm.

$ terraform apply
aws_vpc.main_vpc: Creating...
aws_subnet.subnet_a: Creating...
aws_subnet.subnet_b: Creating...
aws_internet_gateway.gw: Creating...
aws_route_table.public_rt: Creating...
aws_route_table_association.subnet_a_association: Creating...
aws_route_table_association.subnet_b_association: Creating...
aws_security_group.allow_all: Creating...

aws_vpc.main_vpc: Creation complete after 10s
aws_subnet.subnet_a: Creation complete after 5s
aws_subnet.subnet_b: Creation complete after 5s
aws_internet_gateway.gw: Creation complete after 3s
aws_route_table.public_rt: Creation complete after 4s
aws_route_table_association.subnet_a_association: Creation complete after 2s
aws_route_table_association.subnet_b_association: Creation complete after 2s
aws_security_group.allow_all: Creation complete after 4s

Apply complete! Resources: 7 added, 0 changed, 0 destroyed.

$ aws ec2 describe-vpcs --query 'Vpcs[].[VpcId,CidrBlock,State]'
[
    [
        "vpc-xxxxxxxx",
        "10.0.0.0/16",
        "available"
    ]
]

$ aws ec2 describe-subnets --query 'Subnets[].[SubnetId,CidrBlock]'
[
    [
        "subnet-xxxxxxxx",
        "10.0.1.0/24"
    ],
    [
        "subnet-xxxxxxxx",
        "10.0.2.0/24"
    ]
]

